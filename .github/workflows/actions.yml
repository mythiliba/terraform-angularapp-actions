
name: Deploy to ECR

on:
 
  push:
    branches: [ main ]

env:

 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 AWS_DEFAULT_REGION: "us-east-1"
 ECR_REPOSITORY: my-angular-repo
 IMAGE_TAG: ${{ github.run_number }}
 
 
jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-angular-repo
        IMAGE_TAG: ${{ github.run_number }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


 
    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "1.4.2"
   
    - name: Terraform init
      id: init
      run: terraform init
   
    - name: Terraform validate
      id: validate
      env:
        TF_VAR_image_name: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: terraform validate 
 
    - name: Terraform plan
      id: plan
      env:
        TF_VAR_image_name: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: terraform plan -var "image_name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      continue-on-error: true
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
 
    - name: Terraform Destroy
      id: destroy
      env:
        TF_VAR_image_name: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
      run: terraform destroy -var "image_name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" --auto-approve

    - name: Remove state 
      id: rm 
      run: terraform state rm module.ecs_service.aws_ecs_task_definition.this
